Program na práci se soubory. Myšlenka jest: pro danou složku chci vyhledat
(rekurzivne ci ne) všechny soubory vyhovující danému filtru. Následkne provést
pro vybrané soubory danou akci. Napr. zkopírovat/presunout do složky výstupní.
Nebo provést prejmenování ci prosté vypsání souboru na obrazovku. Program by mel
by disajovaný na snadou rozširitelnost pro další a další nové operace se soubory.
Rozšišitelnost pro nové filty. V první fazi pro vstupní složku provést prejmenování/presunutí
dle jednoduchého filtru do výstupní složky

Soubor
Slozka - tohle neni dulezite, bude promenna
Filtr
Akce/Operace

Soubor
- zna svoje umisteni/cestu
- zna svuj nazev
At to nejsou metody ale nejakej pattern:
(Abstract Factory? - generuje Akci)
Copy from to
Move from to
Rename from to
Delete from

Filtr
- umi provest transforamci nazvu na vstupnim stringu
- vystupem bude novy string ...?
- regex, whitelist, blacklist znaku
string output = Transform(string input)

Akce/Operace
- umi provestr operaci nad souborem ... ? vstupni parametry?
- kopirovani - soubor, vystupni cesta
- presun - soubor, vystupni cesta
- prejmenovani, soubor, vystupni cesta
    ... > filtr provedem predem a cesta konstruovana predem

Filtry:

interface Filter.filter(String input)

DELETE
    filter(input)
    add(pattern)
    add(char)
    add(String)
    setBlacklist(bool)
    setWhitelist(bool)

REPLACE
    filter(input)
    add(pattern)
    add(char)
    add(String)
    setBlacklist(bool)
    setWhitelist(bool)
    setReplaceWith(String)

SQUEEZE
    filter(input)
    add(pattern)
    add(char)
    add(String)
    setSqueezeWith(String)

TO_UPPERCASE
    filter(input)

Filtry II:
BLACKLIST_REGEX
    filter(input)
    add(pattern)
    setReplaceWith(String)

BLACKLIST_STRING
    filter(input)
    add(String)
    setReplaceWith(String)

WHITELIST_REGEX
    filter(input)
    add(pattern)
    setReplaceWith(String)

WHITELIST_STRING
    filter(input)
    add(String)
    setReplaceWith(String)

SQUEEZE_CHAR
    filter(input)
    add(char)

SQUEEZE_CHAR_REGEX
    filter(input)
    add(pattern)

TO_UPPER
    filter(input)


Whitespace REGEX
multiple patterns
input supplied one by one, reuse across supplies
regexes:
\s
\w
\d
[^(\s)|(\w)|(\d)]

############################################################################
UI
############################################################################

INPUTs
* input folder
    default execution folder
* output folder
    default execution folder / OUTPUT
* file suffixes (extensions)
    define AUDIO suffixes
    define VIDEO suffixes
    define AUDIO_AND_VIDEO suffixes
    allows any custom suffixes
    default AUDIO_AND_VIDEO
* choose file action
    copy, move, rename, ...
    default copy



############################################################################

MODEL
model(Path inputFolder, Path outputFolder, List<String> suffixes, enum FileAction)
model.setInputFolder
model.setOutputFolder
model.setSuffixes(List)
model.setAction(enum)
Observer model && getters for progress?

Should present progress on file to file basis + percentage based on file count.

FileNameFilterOperation
    allows a-zA-Z0-9_-()[].
    squeeze unfiltered into char _
    trim _ from beginning and end
CustomRegexFilterOperation
    should be able to pick Operations and theirs order

###
FileNameFilterOperation
    -whitelist regex + replace to _
    -squeeze _ char
    -trim _

DATA
staticData - inputFolder, outputFolder, suffixes, isRunning
suffixes - current, predefined list
suffix je String - vic suffixu tvori seznam/List - cele se nazyva kategorie treba AUDIO (mp3, mpa, ...)

jobData - filesToProcess, filesAlreadyProcessed

Map<String, List<String>
nebo
SuffixCategory
    Category()
    Category(List<String>)
    Category(delimitedString, delimiter)
    --
    List<String> suffixes
    String name
    --
    addSuffix(String)
    addSuffixes(List<String>)
    addSuffixes(delimitedString, delimiter)

    iterator item is String
    getSuffixesSize()
    getSuffixesAsList()
    getSuffixesAsDelimitedString(delimiter)

Suffix
    Suffix(String)
    toString()